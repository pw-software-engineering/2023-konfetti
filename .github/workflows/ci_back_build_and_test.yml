# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Back-end build and test

on:
  pull_request:
    branches:
      - 'master'
      - 'dev'
  push:
    branches: 
      - 'master'
      - 'dev'
      - 'feature/*'
      - 'fix/*'
      - 'hotfix/*'
    paths:
      - 'src/back/**'
      - '.github/**'

  workflow_dispatch:
env:
  ACR_URL: 'powoeuwacr.azurecr.io'
  APP_API_NAME: 'konfetti-api'
  APP_PAYMENT_NAME: 'konfetti-payment'
  APP_PDF_GENERATOR_NAME: 'konfetti-pdf-generator'
  PATH_TO_API_DOCKER_FILE: 'Dockerfile.core'
  PATH_TO_PAYMENT_DOCKER_FILE: 'Dockerfile.payment'
  PATH_TO_PDF_GENERATOR_DOCKER_FILE: 'Dockerfile.pdf_generator'
  PATH_TO_APP_SRC: '.'
  DEPLOYMENT_DIRECTORY: './deployment'
  DEPLOYMENT_FILE_NAME_API: 'konfetti-api.yml'
  DEPLOYMENT_FILE_NAME_PAYMENT: 'konfetti-payment.yml'
  DEPLOYMENT_FILE_NAME_PDF: 'konfetti-pdf.yml'
  DEPLOYMENT_FILE_NAME_RABBIT: 'konfetti-rabbit.yml'
  NAMESPACE: 'konfetti'
  PAYMENT_CLIENT_URL: 'http://konfetti-payment.konfetti'
  RABBIT_MQ_HOST: 'konfetti-rabbit.konfetti'
  RABBIT_MQ_PASSWORD: 'guest'
  RABBIT_MQ_USERNAME: 'guest'
  RABBIT_MQ_VIRTUALHOST: '/'
  BLOB_STORAGE_CONTAINER_NAME: 'konfetti'
  IMAGE_ID_KONFETTI_RABBIT: 'rabbitmq:3-management-alpine'
  
jobs:
  build:
    name: Build and test backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/back/TicketManager
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test Domain Tests
      run: dotnet test tests/Core/TicketManager.Core.DomainTests/TicketManager.Core.DomainTests.csproj --no-build
    - name: Test Services Tests
      run: dotnet test tests/Core/TicketManager.Core.ServicesTests/TicketManager.Core.ServicesTests.csproj --no-build
    - name: Test Integration Tests
      run: dotnet test tests/TicketManager.IntegrationTests/TicketManager.IntegrationTests.csproj --no-build

  push-docker:
    name: Push docker image to repository
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/back/TicketManager
    needs: build                    
      
    if: ${{(github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'workflow_dispatch'}}
    steps:
    - uses: actions/checkout@v3
    - name: Set API_IMAGE_ID as env variable
      run: echo "IMAGE_ID_API=${{ env.ACR_URL }}/${{ env.APP_API_NAME }}:v${{ github.run_number }}" >> $GITHUB_ENV
    - name: Set PAYMENT_IMAGE_ID as env variable
      run: echo "IMAGE_ID_PAYMENT=${{ env.ACR_URL }}/${{ env.APP_PAYMENT_NAME }}:v${{ github.run_number }}" >> $GITHUB_ENV
    - name: Set PDF_IMAGE_ID as env variable
      run: echo "IMAGE_ID_PDF=${{ env.ACR_URL }}/${{ env.APP_PDF_GENERATOR_NAME }}:v${{ github.run_number }}" >> $GITHUB_ENV
    - name: Print API_IMAGE_ID
      run: echo "IMAGE_ID_API:${{ env.IMAGE_ID_API }}"
    - name: Print PAYMENT_IMAGE_ID
      run: echo "IMAGE_ID_PAYMENT:${{ env.IMAGE_ID_PAYMENT }}"
    - name: Print PDF_IMAGE_ID
      run: echo "IMAGE_ID_PDF:${{ env.IMAGE_ID_PDF }}"
    - name: Login to ACR
      uses: docker/login-action@v2
      with:
        registry: ${{ env.ACR_URL }}
        username: ${{ secrets.ACR_USER_ID }}
        password: ${{ secrets.ACR_USER_PASSWORD }}
    - name: Build docker image for api
      run: docker build -f ${{ env.PATH_TO_API_DOCKER_FILE }} ${{ env.PATH_TO_APP_SRC }} -t ${{ env.IMAGE_ID_API }}
    - name: Build docker image for payment service
      run: docker build -f ${{ env.PATH_TO_PAYMENT_DOCKER_FILE }} ${{ env.PATH_TO_APP_SRC }} -t ${{ env.IMAGE_ID_PAYMENT }}
    - name: Build docker image for pdf generator
      run: docker build -f ${{ env.PATH_TO_PDF_GENERATOR_DOCKER_FILE }} ${{ env.PATH_TO_APP_SRC }} -t ${{ env.IMAGE_ID_PDF }}
    - name: Push docker image for api
      run: docker push ${{ env.IMAGE_ID_API }}
    - name: Push docker image for payment service
      run: docker push ${{ env.IMAGE_ID_PAYMENT }}
    - name: Push docker image for pdf genertator
      run: docker push ${{ env.IMAGE_ID_PDF }}
      
  deploy:
    name: Deploy app to kubernetes
    runs-on: ubuntu-latest
    needs: push-docker
    
    if: ${{(github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'workflow_dispatch'}}
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - uses: azure/setup-kubectl@v3
      with:
        version: 'v1.18.8'
    - uses: azure/aks-set-context@v3
      with:
        cluster-name: ${{ secrets.AKS_NAME }}
        resource-group: ${{ secrets.AKS_RG_NAME }}

    - name: Set IMAGE_ID_KONFETTI_API as env variable
      run: echo "IMAGE_ID_KONFETTI_API=${{ env.ACR_URL }}/${{ env.APP_API_NAME }}:v${{ github.run_number }}" >> $GITHUB_ENV
    - name: Set IMAGE_ID_KONFETTI_PAYMENT as env variable
      run: echo "IMAGE_ID_KONFETTI_PAYMENT=${{ env.ACR_URL }}/${{ env.APP_PAYMENT_NAME }}:v${{ github.run_number }}" >> $GITHUB_ENV
    - name: Set IMAGE_ID_KONFETTI_PDF as env variable
      run: echo "IMAGE_ID_KONFETTI_PDF=${{ env.ACR_URL }}/${{ env.APP_PDF_GENERATOR_NAME }}:v${{ github.run_number }}" >> $GITHUB_ENV
    - name: Set DOMAIN env variable
      run: echo "DOMAIN=$(az aks show -g ${{ secrets.AKS_RG_NAME }} -n ${{ secrets.AKS_NAME }} --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)" >> $GITHUB_ENV
    - name: Print DOMAIN and IMAGE_IDs
      run: |
        echo "${{ env.DOMAIN }}"
        echo "${{ env.IMAGE_ID_KONFETTI_API }}"
        echo "${{ env.IMAGE_ID_KONFETTI_PAYMENT }}"
        echo "${{ env.IMAGE_ID_KONFETTI_PDF }}"
        
    - name: Substitute environment variables in app deployment file
      env:
        API_KEY: ${{ secrets.API_KEY }}
        DATABASE_CONNECTION_STRING: ${{ secrets.DATABASE_CONNECTION_STRING }}
        SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
      run: envsubst < "${{ env.DEPLOYMENT_DIRECTORY }}/${{ env.DEPLOYMENT_FILE_NAME_API }}" > "${{ env.DEPLOYMENT_DIRECTORY }}/out-${{ env.DEPLOYMENT_FILE_NAME_API }}"
    - name: Substitute environment variables in payment deployment file
      env:
        API_KEY: ${{ secrets.API_KEY }}
      run: envsubst < "${{ env.DEPLOYMENT_DIRECTORY }}/${{ env.DEPLOYMENT_FILE_NAME_PAYMENT }}" > "${{ env.DEPLOYMENT_DIRECTORY }}/out-${{ env.DEPLOYMENT_FILE_NAME_PAYMENT }}"
    - name: Substitute environment variables in pdf deployment file
      env:
        BLOB_CONNECTION: ${{ secrets.BLOB_CONNECTION }}
      run: envsubst < "${{ env.DEPLOYMENT_DIRECTORY }}/${{ env.DEPLOYMENT_FILE_NAME_PDF }}" > "${{ env.DEPLOYMENT_DIRECTORY }}/out-${{ env.DEPLOYMENT_FILE_NAME_PDF }}"
    - name: Substitute environment variables in rabbit deployment file
      run: envsubst < "${{ env.DEPLOYMENT_DIRECTORY }}/${{ env.DEPLOYMENT_FILE_NAME_RABBIT }}" > "${{ env.DEPLOYMENT_DIRECTORY }}/out-${{ env.DEPLOYMENT_FILE_NAME_RABBIT }}"
    
    - name: Deploy api to the cluster
      run: kubectl apply -f ${{ env.DEPLOYMENT_DIRECTORY }}/out-${{ env.DEPLOYMENT_FILE_NAME_API }} --wait
    - name: Deploy payment to the cluster
      run: kubectl apply -f ${{ env.DEPLOYMENT_DIRECTORY }}/out-${{ env.DEPLOYMENT_FILE_NAME_PAYMENT }} --wait
    - name: Deploy pdf to the cluster
      run: kubectl apply -f ${{ env.DEPLOYMENT_DIRECTORY }}/out-${{ env.DEPLOYMENT_FILE_NAME_PDF }} --wait
    - name: Deploy rabbit to the cluster
      run: kubectl apply -f ${{ env.DEPLOYMENT_DIRECTORY }}/out-${{ env.DEPLOYMENT_FILE_NAME_RABBIT }} --wait
    
    
    
    
